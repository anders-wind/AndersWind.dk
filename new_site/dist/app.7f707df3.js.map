{"version":3,"sources":["Press.ts","glsl/2d-vertex-shader.glsl","glsl/2d-fragment-shader.glsl","renderer.ts","app.ts"],"names":["module","exports"],"mappings":"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","file":"app.7f707df3.js","sourceRoot":"../src","sourcesContent":["export class Press {\n  public current: { x: number; y: number } = { x: 0, y: 0 };\n  public old: { x: number; y: number } = { x: 0, y: 0 };\n  public delta: { x: number; y: number } = { x: 0, y: 0 };\n  public power: number = 0;\n  public isDead: boolean = false;\n  public isMouse: boolean = false;\n\n  public readonly id: number;\n\n  constructor(id: number) {\n    this.id = id;\n  }\n}\n","module.exports=\"#define GLSLIFY 1\\nattribute vec2 position;\\n  void main() {\\n    gl_Position = vec4(position, 0, 1);\\n  }\";","module.exports=\"precision highp float;\\n#define GLSLIFY 1\\n\\nuniform float time;\\nuniform float gravity;\\nuniform float reach;\\nuniform int amtPresses;\\nuniform vec2 resolution;\\nuniform vec2 rotation;\\nuniform vec2 pitch; // number of grids\\nuniform vec3 presses[6];\\n\\nvec4 grid(float modX, float modY, float strength) {\\n\\tfloat density = 0.4 * (1.0 - abs((2.0-min(modX, modY))/2.0)); // grid alpa 0.5 and then anti alias.\\n\\treturn vec4(0.0, 0.0, 0.0, density*strength);\\n}\\n\\nvoid main() {\\n    float resLength = length(resolution);\\n\\n    vec2 pull = vec2(0.0, 0.0);\\n    float strength = 0.15;\\n    for(int i = 0; i<=6; i++){\\n        if (amtPresses==i)\\n            break;\\n        vec3 press = presses[i];\\n        vec2 delta = press.xy-gl_FragCoord.xy;\\n        float distance = length(delta);\\n        pull += delta * (gravity*press.z / (distance*distance + reach));\\n        \\n        float fade = max(0.0, 0.9-distance/resLength); // 1.2 due to some scaling\\n        float dist = min(1.0, max(0.0, press.z));\\n        strength = max(strength, fade*dist);\\n    }\\n\\n    vec2 newPos = pitch + pull;\\n\\n    float modX = mod(reach + gl_FragCoord.x, newPos.x);\\n    float modY = mod(reach + gl_FragCoord.y, newPos.y);\\n\\n\\tgl_FragColor = grid(modX, modY, strength);\\n}\";","import { Press } from './Press';\n\ndeclare function require(name: string): string;\nconst vertexShaderSource: string = (() =>\n  require('./glsl/2d-vertex-shader.glsl'))();\nconst fragmentShaderSource: string = (() =>\n  require('./glsl/2d-fragment-shader.glsl'))();\n\nexport interface IRenderable {\n  renderGravityGrid(div: HTMLElement): void;\n}\n\nclass Renderer implements IRenderable {\n  private gl: WebGLRenderingContext | null = null;\n  private program: WebGLProgram | null = null;\n  private canvas: HTMLCanvasElement = document.createElement('canvas');\n  private start: number = new Date().getTime();\n\n  private idMapper: number[] = Array(0);\n  private presses: Press[] = Array(6); // mouse + 5 touch points.\n\n  public renderGravityGrid(div: HTMLElement): void {\n    this.canvas.style.width = '100%';\n    this.canvas.style.height = '100%';\n    div.appendChild(this.canvas);\n    this.gl = this.canvas.getContext('experimental-webgl');\n\n    window.onload = () => {\n      this.init();\n      this.render();\n    };\n  }\n\n  private takeFirstFreeIndex(id: number): number {\n    for (let i = 0; i < this.presses.length; i++) {\n      if (!this.presses[i] || this.presses[i].id === -1) {\n        this.idMapper[id] = i;\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  private takeFirstFreeIndexMouse(): number {\n    for (let i = this.presses.length - 1; i >= 0; i--) {\n      if (!this.presses[i] || this.presses[i].id === -1) {\n        // no press\n        this.idMapper[i] = i;\n        return i;\n      } else if (\n        this.presses[i].isMouse &&\n        this.presses[i].isDead &&\n        this.presses[i].power <= 2\n      ) {\n        // dead press\n        this.idMapper[i] = i;\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  private findActiveMouse(): Press | null {\n    for (let i = this.presses.length - 1; i >= 0; i--) {\n      if (\n        this.presses[i] &&\n        this.presses[i].id !== -1 &&\n        !this.presses[i].isDead &&\n        this.presses[i].isMouse\n      ) {\n        return this.presses[i];\n      }\n    }\n    return null;\n  }\n\n  private getPos(\n    canvas: HTMLCanvasElement,\n    x: number,\n    y: number\n  ): { x: number; y: number } {\n    const rect: ClientRect = canvas.getBoundingClientRect();\n    return {\n      x: ((x - rect.left) / (rect.right - rect.left)) * canvas.width,\n      y: ((y - rect.bottom) / (rect.top - rect.bottom)) * canvas.height,\n    };\n  }\n  private getMousePos(\n    canvas: HTMLCanvasElement,\n    evt: Event\n  ): { x: number; y: number } {\n    const mouseEvt: MouseEvent = evt as MouseEvent;\n    return this.getPos(canvas, mouseEvt.clientX, mouseEvt.clientY);\n  }\n\n  private getTouchPos(\n    canvas: HTMLCanvasElement,\n    touch: Touch\n  ): { x: number; y: number } {\n    const rect: ClientRect = canvas.getBoundingClientRect();\n    return this.getPos(canvas, touch.clientX, touch.clientY);\n  }\n\n  private getSize(): void {\n    this.canvas.width = this.canvas.clientWidth;\n    this.canvas.height = this.canvas.clientHeight;\n  }\n\n  private setTimedInterval(\n    callbackInterval: () => void,\n    callbackTimeout: () => void,\n    delay: number,\n    timeout: number\n  ): void {\n    const id: number = window.setInterval(callbackInterval, delay);\n    window.setTimeout(() => {\n      window.clearInterval(id);\n      callbackTimeout();\n    }, timeout);\n  }\n\n  private addListeners(): void {\n    this.canvas.addEventListener(\n      'mouseenter',\n      evt => {\n        const id: number = this.takeFirstFreeIndexMouse();\n        if (id > 0) {\n          const press: Press = new Press(id);\n          press.isMouse = true;\n          press.current = this.getMousePos(this.canvas, evt);\n          press.old = press.current;\n          this.presses[id] = press;\n        }\n      },\n      false\n    );\n\n    this.canvas.addEventListener(\n      'mousemove',\n      evt => {\n        let press: Press | null = this.findActiveMouse();\n        if (!press) {\n          const id: number = this.takeFirstFreeIndexMouse();\n          if (id) {\n            press = new Press(id);\n            press.isMouse = true;\n            press.current = this.getMousePos(this.canvas, evt);\n            press.old = press.current;\n            this.presses[id] = press;\n          }\n        } else if (press) {\n          press.old = press.current;\n          press.current = this.getMousePos(this.canvas, evt);\n        }\n      },\n      false\n    );\n\n    this.canvas.addEventListener(\n      'mouseleave',\n      evt => {\n        const press: Press | null = this.findActiveMouse();\n        if (press) {\n          press.isDead = true;\n        }\n      },\n      false\n    );\n\n    this.canvas.addEventListener(\n      'touchstart',\n      evt => {\n        evt.preventDefault();\n        // tslint:disable-next-line:prefer-for-of\n        for (let i = 0; i < evt.changedTouches.length; i++) {\n          const touch: Touch = evt.changedTouches[i];\n          const id = this.takeFirstFreeIndex(touch.identifier);\n          if (id >= 0) {\n            const press: Press = new Press(id);\n            press.current = this.getTouchPos(this.canvas, touch);\n            press.old = press.current;\n\n            this.presses[press.id] = press;\n          }\n        }\n      },\n      false\n    );\n\n    this.canvas.addEventListener(\n      'touchmove',\n      evt => {\n        evt.preventDefault();\n        // tslint:disable-next-line:prefer-for-of\n        for (let i = 0; i < evt.changedTouches.length; i++) {\n          const touch: Touch = evt.changedTouches[i];\n          const id = this.idMapper[touch.identifier];\n          if (id >= 0) {\n            const press: Press = this.presses[id];\n            press.old = press.current;\n            press.current = this.getTouchPos(this.canvas, touch);\n          }\n        }\n      },\n      false\n    );\n\n    this.canvas.addEventListener(\n      'touchend',\n      evt => {\n        evt.preventDefault();\n        const ids: number[] = Array();\n        // tslint:disable-next-line:prefer-for-of\n        for (let i = 0; i < evt.changedTouches.length; i++) {\n          const touch: Touch = evt.changedTouches[i];\n          const id = this.idMapper[touch.identifier];\n          if (id >= 0) {\n            const press: Press = this.presses[id];\n            press.delta = {\n              x: press.current.x - press.old.x,\n              y: press.current.y - press.old.y,\n            };\n            press.isDead = true;\n            ids.push(id);\n          }\n        }\n\n        this.setTimedInterval(\n          () => {\n            // interval\n            // tslint:disable-next-line:prefer-for-of\n            for (let i = 0; i < ids.length; i++) {\n              const id = ids[i];\n              if (id >= 0) {\n                const press: Press = this.presses[id];\n                press.current = {\n                  x: press.current.x + (press.delta.x * press.power) / 250,\n                  y: press.current.y + (press.delta.y * press.power) / 250,\n                };\n              }\n            }\n          },\n          () => {\n            // timeout\n            // tslint:disable-next-line:prefer-for-of\n            for (let i = 0; i < ids.length; i++) {\n              const id = ids[i];\n              this.presses[id] = new Press(-1);\n            }\n          },\n          18,\n          2000\n        );\n      },\n      false\n    );\n\n    window.onresize = () => setTimeout(() => this.getSize(), 1);\n  }\n\n  private init(): void {\n    let vertexShader: WebGLShader | null;\n    let fragmentShader: WebGLShader | null;\n    this.addListeners();\n    this.getSize();\n    if (this.gl) {\n      const buffer: WebGLBuffer | null = this.gl.createBuffer();\n      this.gl.bindBuffer(this.gl.ARRAY_BUFFER, buffer);\n      this.gl.bufferData(\n        this.gl.ARRAY_BUFFER,\n        new Float32Array([\n          -1.0,\n          -1.0,\n          1.0,\n          -1.0,\n          -1.0,\n          1.0,\n          -1.0,\n          1.0,\n          1.0,\n          -1.0,\n          1.0,\n          1.0,\n        ]),\n        this.gl.STATIC_DRAW\n      );\n      this.gl.viewport(\n        0,\n        0,\n        this.gl.drawingBufferWidth,\n        this.gl.drawingBufferHeight\n      );\n      vertexShader = this.gl.createShader(this.gl.VERTEX_SHADER);\n      this.gl.shaderSource(vertexShader, vertexShaderSource);\n      this.gl.compileShader(vertexShader);\n      fragmentShader = this.gl.createShader(this.gl.FRAGMENT_SHADER);\n      this.gl.shaderSource(fragmentShader, fragmentShaderSource);\n      this.gl.compileShader(fragmentShader);\n      this.program = this.gl.createProgram();\n      this.gl.attachShader(this.program, vertexShader);\n      this.gl.attachShader(this.program, fragmentShader);\n      this.gl.linkProgram(this.program);\n      this.gl.useProgram(this.program);\n    }\n  }\n\n  private addGLProperties(): void {\n    if (this.gl) {\n      const positionLocation: number = this.gl.getAttribLocation(\n        this.program,\n        'position'\n      );\n      this.gl.enableVertexAttribArray(positionLocation);\n      this.gl.vertexAttribPointer(\n        positionLocation,\n        2,\n        this.gl.FLOAT,\n        true,\n        0,\n        0\n      );\n\n      const resolutionPosition: WebGLUniformLocation | null = this.gl.getUniformLocation(\n        this.program,\n        'resolution'\n      );\n      this.gl.uniform2f(\n        resolutionPosition,\n        this.canvas.width,\n        this.canvas.height\n      );\n\n      const rotationPosition: WebGLUniformLocation | null = this.gl.getUniformLocation(\n        this.program,\n        'rotation'\n      );\n      this.gl.uniform2f(rotationPosition, 0.5, 0.8);\n\n      const timePosition: WebGLUniformLocation | null = this.gl.getUniformLocation(\n        this.program,\n        'time'\n      );\n      this.gl.uniform1f(\n        timePosition,\n        (new Date().getTime() - this.start) / 1000\n      );\n\n      const gravityPosition: WebGLUniformLocation | null = this.gl.getUniformLocation(\n        this.program,\n        'gravity'\n      );\n      this.gl.uniform1f(gravityPosition, 70);\n\n      const reachPosition: WebGLUniformLocation | null = this.gl.getUniformLocation(\n        this.program,\n        'reach'\n      );\n      this.gl.uniform1f(reachPosition, 10000);\n\n      const offsetPosition: WebGLUniformLocation | null = this.gl.getUniformLocation(\n        this.program,\n        'offset'\n      );\n      this.gl.uniform2f(offsetPosition, 0, 0);\n\n      const pitchPosition: WebGLUniformLocation | null = this.gl.getUniformLocation(\n        this.program,\n        'pitch'\n      );\n      this.gl.uniform2f(pitchPosition, 80, 80);\n\n      let presses: number = 0;\n      for (let i: number = 0; i < 7; i++) {\n        if (this.presses[i] && this.presses[i].id !== -1) {\n          const pressPosition: WebGLUniformLocation | null = this.gl.getUniformLocation(\n            this.program,\n            'presses[' + presses + ']'\n          );\n          this.gl.uniform3f(\n            pressPosition,\n            this.presses[i].current.x,\n            this.presses[i].current.y,\n            this.presses[i].power / 250\n          );\n          presses++;\n        }\n      }\n\n      const amtPressesPosition: WebGLUniformLocation | null = this.gl.getUniformLocation(\n        this.program,\n        'amtPresses'\n      );\n      this.gl.uniform1i(amtPressesPosition, presses);\n    }\n  }\n\n  private render(): void {\n    if (this.gl) {\n      this.addGLProperties();\n      this.gl.drawArrays(this.gl.TRIANGLES, 0, 6);\n      requestAnimationFrame(() => this.render());\n\n      for (const press of this.presses) {\n        if (press && press.isDead && press.power > 0) {\n          press.power -= 2;\n        } else if (press && !press.isDead && press.power < 200) {\n          press.power += 7;\n        }\n      }\n    }\n  }\n}\n\nexport { Renderer };\n","import './acrylic.scss';\nimport './base.scss';\n\nimport { IRenderable, Renderer } from './renderer';\n\nconst renderer: IRenderable = new Renderer();\n\nconst el = document.getElementById('grid');\nif (el) {\n  renderer.renderGravityGrid(el);\n}\n"]}